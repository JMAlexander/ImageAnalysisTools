load("~/Library/Mobile Documents/com~apple~CloudDocs/Bead_data_07112017.Rdata")
knitr::opts_chunk$set(echo = TRUE)
library(depmixS4)
load("~/Library/Mobile Documents/com~apple~CloudDocs/Sox2_data_050817.RData")
set.seed(5)
z1 <- rnorm(n=1000, mean=3, sd=1)
z2 <- rnorm(n=1000, mean=3, sd=1)
plot(z1, z2)
X <- array(dim=length(z1))
head(x)
head(X)
knitr::opts_chunk$set(echo = TRUE)
library(depmixS4)
load("~/Library/Mobile Documents/com~apple~CloudDocs/Sox2_data_050817.RData")
knitr::opts_chunk$set(echo = TRUE)
library(depmixS4)
load("~/Library/Mobile Documents/com~apple~CloudDocs/Sox2_data_050817.RData")
load("~/Library/Mobile Documents/com~apple~CloudDocs/.Sox2_data_050817.RData.icloud")
load("~/Desktop/Sox2_data_050817.RData")
X <- rnorm(1000, 1, 0.5)
Y <- rnorm(1000, 10, 2)
Z <- rbind(X,Y)
hist(Z, breaks=30, xlab="Value")
set.seed(seed=2)
X1 <- rnorm(10000, 1, 0.3)
X2 <- rnorm(10000, 10, 0.6)
trans_probs <- matrix(data=c(0.95, 0.05, 0.01, 0.99),byrow=TRUE, nrow=2)
states <- c(1, 2)
s0 <- 1;
s <- s0;
## Load data into DataFrame
data <- data.frame(X1, X2)
n = 10000
t_states <- s0;
for (i in 1:(n-1)){
s <- sample(states, size=1, prob=trans_probs[s, ])
t_states <- c(t_states, s)
}
traj <- sapply(1:n, function(x) data[x, t_states[x]])
plot(traj[1:1000], pch=16, ylab="Value", xlab="Time")
hmm <- depmix(response = traj ~ 1, data=data.frame(traj), nstates=2, instart=c(1,0))
f <- fit(hmm)
summary(f)
esttrans <- posterior(f)
plot(1:1000, traj[1:1000], type='l', main='Sample trajectory', ylab=c("Value"), xlab=c("Time"))
plot(1:1000, t_states[1:1000], type='l', col="red", main='Actual State', ylab=c("Value"), xlab=c("Time"))
plot(1:1000, esttrans[1:1000,1], type="l", col="blue", main="Predicted State", ylab=c("Value"), xlab=c("Time"))
X <- rnorm(10000, 1, 0.5)
Y <- rnorm(10000, 2, 0.6)
Z <- rbind(X,Y)
hist(Z, breaks=30, xlab="Value")
##Establish Two-State Time Course Data
set.seed(seed=3)
X1 <- rnorm(10000, 1, 0.5)
X2 <- rnorm(10000, 2, 0.5)
trans_probs <- matrix(data=c(0.95, 0.05, 0.01, 0.99),byrow=TRUE, nrow=2)
states <- c(1, 2)
s0 <- 1;
s <- s0;
## Load data into DataFrame
data <- data.frame(X1, X2)
n = 10000
t_states <- s0;
for (i in 1:(n-1)){
s <- sample(states, size=1, prob=trans_probs[s, ])
t_states <- c(t_states, s)
}
traj <- sapply(1:n, function(x) data[x, t_states[x]])
plot(traj[1:1000], pch=16, xlab="Time", ylab="Value")
hmm <- depmix(response = traj ~ 1, data=data.frame(traj), nstates=2, instart=c(1,0))
f <- fit(hmm)
summary(f)
esttrans <- posterior(f)
plot(1:1000, traj[1:1000], type='l', main='Sample trajectory', xlab="Time", ylab="Value")
plot(1:1000, t_states[1:1000], type='l', col="red", main='Actual State', xlab="Time", ylab="State")
plot(1:1000, esttrans[1:1000,1], type="l", col="blue", main="Predicted State", xlab="Time", ylab="State")
##Use 1D measures so that they are gaussian
x <- Sox2_data_unsync_20sec
L_fitX <- fitdistr(x[x$Cell_Line == "121316.2E1_ESC", "Corrected X_Distance (um)"], densfun = "normal")
L_fitY <- fitdistr(x[x$Cell_Line == "121316.2E1_ESC", "Corrected Y_Distance (um)"], densfun = "normal")
step <- seq(-1,1,0.01)
hist(x[x$Cell_Line == "121316.2E1_ESC", "Corrected X_Distance (um)"], freq = FALSE, ylim=c(0,5), xlab="X Distance (um)", xlim=c(-0.5,0.5), main="Looped Model X Distance Distribution")
L_model <- dnorm(step, mean=L_fitX$estimate["mean"], sd=L_fitX$estimate["sd"])
lines(step, L_model, lty="dashed", col="red", lwd=2)
hist(x[x$Cell_Line == "121316.2E1_ESC", "Corrected Y_Distance (um)"], freq = FALSE, ylim=c(0,5), xlab="Y Distance (um)", xlim=c(-0.5,0.5), main="Looped Model Y Distance Distribution")
L_model <- dnorm(step, mean=L_fitY$estimate["mean"], sd=L_fitY$estimate["sd"])
lines(step, L_model, lty="dashed", col="red", lwd=2)
U_fitX <- fitdistr(x[x$Cell_Line == "013116.2G8_ESC", "Corrected X_Distance (um)"], densfun = "normal")
U_fitY <- fitdistr(x[x$Cell_Line == "013116.2G8_ESC", "Corrected Y_Distance (um)"], densfun = "normal")
step <- seq(-1,1,0.01)
hist(x[x$Cell_Line == "013116.2G8_ESC", "Corrected X_Distance (um)"], freq = FALSE, ylim=c(0,2.5), xlab="X Distance (um)", xlim=c(-0.75,0.75), main="Unlooped Model X Distance Distribution")
U_model <- dnorm(step, mean=U_fitX$estimate["mean"], sd=U_fitX$estimate["sd"])
lines(step, U_model, lty="dashed", col="red", lwd=2)
legend(x="topright", lwd=2, lty="dashed", legend="Fit Gaussian", col="red")
hist(x[x$Cell_Line == "013116.2G8_ESC", "Corrected Y_Distance (um)"], freq = FALSE, ylim=c(0,2.5), xlab="Y Distance (um)", xlim=c(-0.75,0.75), main="Unlooped Model Y Distance Distribution")
U_model <- dnorm(step, mean=U_fitY$estimate["mean"], sd=U_fitY$estimate["sd"])
lines(step, U_model, lty="dashed", col="red", lwd=2)
legend(x="topright", lwd=2, lty="dashed", legend="Fit Gaussian", col="red")
set.seed(seed=4)
L_X <- rnorm(10000, mean=L_fitX$estimate["mean"], sd=L_fitX$estimate["sd"])
U_X <- rnorm(10000, mean=U_fitX$estimate["mean"], sd=U_fitX$estimate["sd"])
L_Y <- rnorm(10000, mean=L_fitY$estimate["mean"], sd=L_fitY$estimate["sd"])
U_Y <- rnorm(10000, mean=U_fitY$estimate["mean"], sd=U_fitY$estimate["sd"])
trans_probs <- matrix(data=c(0.95, 0.01, 0.01, 0.99),byrow=TRUE, nrow=2)
states <- c(1, 2)
s0 <- 1;
s <- s0;
## Load data into DataFrame
Xdata <- data.frame(L_X, U_X)
Ydata <- data.frame(L_Y, U_Y)
n = 10000
t_states <- s0;
for (i in 1:(n-1)){
s <- sample(states, size=1, prob=trans_probs[s, ])
t_states <- c(t_states, s)
}
traj_X <- sapply(1:n, function(x) Xdata[x, t_states[x]])
traj_Y <- sapply(1:n, function(x) Ydata[x, t_states[x]])
plot(traj_X[1:1000], pch=16, ylim=c(-0.8,0.8), xlab="Frames", ylab="X Distance (um)")
plot(traj_Y[1:1000], pch=16, ylim=c(-0.8,0.8), xlab="Frames", ylab="Y Distance (um)")
hmm <- depmix(response = list(traj_X ~ 1, traj_Y ~ 1), ntimes=10000, nstates=2, family=list(gaussian(), gaussian()), instart=c(1,0))
f <- fit(hmm)
summary(f)
esttrans <- posterior(f)
plot(1:1000, sqrt((traj_X[1:1000])^2 + (traj_Y[1:1000])^2), type='l', main='Sample trajectory', xlab="Frames", ylab="XY Distance (um)")
plot(1:1000, t_states[1:1000], type='l', col="red", main='Actual State', xlab="Frames", ylab="State")
plot(1:1000, esttrans[1:1000,1], type="l", col="blue", main="Predicted State", xlab="Frames", ylab="State")
autoFunc <- function(x, rho, dist){
y <- rho * x + sqrt(1 - rho^2) * sample(dist, size=1)
return(y)
}
set.seed(5)
z1 <- rnorm(n=1000, mean=0, sd=1)
X <- array(dim=length(z1))
cor <- 0.8
X[1] <- z1[1]
for (i in 2:length(z1)){
X[i] <- autoFunc(X[i - 1], cor, z1)
}
z2 <- rnorm(n=1000, mean=0, sd=1)
Y <- array(dim=length(z2))
cor <- 0.8
Y[1] <- z2[1]
for (i in 2:length(z2)){
Y[i] <- autoFunc(Y[i - 1], cor, z1)
}
plot(X, pch=16, col="red", ylim=c(0, 15), ylab="Value", xlab="Time", main="Two autocorrelated time course datasets from which to sample")
legend(x="topright", pch=16, legend=c("State1", "State2"), col=c("red", "purple"))
points(Y, pch=16, col="purple")
trans_probs <- matrix(data=c(0.99, 0.01, 0.01, 0.99),byrow=TRUE, nrow=2)
states <- c(1, 2)
s0 <- 1;
s <- s0;
## Load data into DataFrame
data <- data.frame(X, Y)
n = 10000
t_states <- s0;
for (i in 1:(n-1)){
s <- sample(states, size=1, prob=trans_probs[s, ])
t_states <- c(t_states, s)
}
traj <- sapply(1:n, function(x) data[x, t_states[x]])
plot(traj[1:1000], pch=16, xlab="Time", ylab="Value", main="Autocorrelated time course dataset derived from two independent states")
hmm <- depmix(response = traj~1, ntimes=10000, nstates=2, family=gaussian(), instart=c(1,0))
f <- fit(hmm)
summary(f)
esttrans <- posterior(f)
plot(1:1000, traj[1:1000], type='l', main='Sample trajectory', xlab="Time", ylab="Value")
plot(1:1000, t_states[1:1000], type='l', col="red", main='Actual State', xlab="Time", ylab="State")
plot(1:1000, esttrans[1:1000,1], type="l", col="blue", main="Predicted State", xlab="Time", ylab="State")
x <- Sox2_data_unsync_20sec
images <- unique(x$C1_Image)
for (i in 1:length(images)) {
start = 1;
end = 100;
cur_image = images[i];
cur_data = x[x$C1_Image == cur_image,];
for (j in start:end) {
if (nrow(cur_data[cur_data$`C1_T Value (frame)` == (j - 1),]) != 0 & nrow(cur_data[cur_data$`C1_T Value (frame)` == j,]) != 0){
x[x$C1_Image == cur_image & x$`C1_T Value (frame)` == j, "Relative_X.Displacement..um."] <- (x[x$C1_Image == cur_image & x$`C1_T Value (frame)` == (j - 1), "Relative_C1_Corrected_X Value (um)"] - x[x$C1_Image == cur_image & x$`C1_T Value (frame)` == j, "Relative_C1_Corrected_X Value (um)"]);
x[x$C1_Image == cur_image & x$`C1_T Value (frame)` == j, "Relative_Y.Displacement..um."] <- (x[x$C1_Image == cur_image & x$`C1_T Value (frame)` == (j - 1), "Relative_C1_Corrected_Y Value (um)"] - x[x$C1_Image == cur_image & x$`C1_T Value (frame)` == j, "Relative_C1_Corrected_Y Value (um)"]);
}
else{
x[x$C1_Image == cur_image & x$`C1_T Value (frame)` == j, "Relative_X.Displacement..um."] <- NA;
x[x$C1_Image == cur_image & x$`C1_T Value (frame)` == j, "Relative_Y.Displacement..um."] <- NA;
}
}
}
hist(x[x$Cell_Line == "101515.C3_ESC", "Relative_X.Displacement..um."], breaks=c(-10, seq(-0.95, 0.95, by=0.05), 10), xlim=c(-1, 1))
hist(x[x$Cell_Line == "101515.C3_ESC", "Relative_Y.Displacement..um."], breaks=c(-10, seq(-0.95, 0.95, by=0.05), 10), xlim=c(-1, 1))
hist(x[x$Cell_Line == "013116.2G8_ESC", "Relative_X.Displacement..um."], breaks=c(-10, seq(-0.95, 0.95, by=0.05), 10), xlim=c(-1, 1))
hist(x[x$Cell_Line == "013116.2G8_ESC", "Relative_Y.Displacement..um."], breaks=c(-10, seq(-0.95, 0.95, by=0.05), 10), xlim=c(-1, 1))
hist(x[x$Cell_Line == "121316.2E1_ESC", "Relative_X.Displacement..um."], breaks=c(-10, seq(-0.95, 0.95, by=0.05), 10), xlim=c(-1, 1))
hist(x[x$Cell_Line == "121316.2E1_ESC", "Relative_Y.Displacement..um."], breaks=c(-10, seq(-0.95, 0.95, by=0.05), 10), xlim=c(-1, 1))
##Use 1D measures so that they are gaussian
L_fitX <- fitdistr(na.omit(x[x$Cell_Line == "121316.2E1_ESC", "Relative_X.Displacement..um."]), densfun = "normal" )
L_fitY <- fitdistr(na.omit(x[x$Cell_Line == "121316.2E1_ESC", "Relative_Y.Displacement..um."]), densfun = "normal")
step <- seq(-1,1,0.01)
hist(x[x$Cell_Line == "121316.2E1_ESC", "Relative_X.Displacement..um."], freq = FALSE, ylim=c(0,5), xlab="X Displacement (um)", xlim=c(-0.5,0.5), main="Looped Model X Displacement Distribution")
L_model <- dnorm(step, mean=L_fitX$estimate["mean"], sd=L_fitX$estimate["sd"])
lines(step, L_model, lty="dashed", col="red", lwd=2)
hist(x[x$Cell_Line == "121316.2E1_ESC", "Relative_Y.Displacement..um."], freq = FALSE, ylim=c(0,5), xlab="Y Displacement (um)", xlim=c(-0.5,0.5), main="Looped Model Y Displacement Distribution")
L_model <- dnorm(step, mean=L_fitY$estimate["mean"], sd=L_fitY$estimate["sd"])
lines(step, L_model, lty="dashed", col="red", lwd=2)
U_fitX <- fitdistr(na.omit(x[x$Cell_Line == "013116.2G8_ESC", "Relative_X.Displacement..um."]), densfun = "normal")
U_fitY <- fitdistr(na.omit(x[x$Cell_Line == "013116.2G8_ESC", "Relative_Y.Displacement..um."]), densfun = "normal")
step <- seq(-1,1,0.01)
hist(x[x$Cell_Line == "013116.2G8_ESC", "Relative_X.Displacement..um."], freq = FALSE, ylim=c(0,2.5), xlab="X Displacement (um)", xlim=c(-0.75,0.75), main="Unlooped Model X Displacement Distribution")
U_model <- dnorm(step, mean=U_fitX$estimate["mean"], sd=U_fitX$estimate["sd"])
lines(step, U_model, lty="dashed", col="red", lwd=2)
legend(x="topright", lwd=2, lty="dashed", legend="Fit Gaussian", col="red")
hist(x[x$Cell_Line == "013116.2G8_ESC", "Relative_Y.Displacement..um."], freq = FALSE, ylim=c(0,2.5), xlab="Y Displacement (um)", xlim=c(-0.75,0.75), main="Unlooped Model Y Displacement Distribution")
U_model <- dnorm(step, mean=U_fitY$estimate["mean"], sd=U_fitY$estimate["sd"])
lines(step, U_model, lty="dashed", col="red", lwd=2)
legend(x="topright", lwd=2, lty="dashed", legend="Fit Gaussian", col="red")
#set.seed(seed=4)
L_X <- rnorm(10000, mean=L_fitX$estimate["mean"], sd=L_fitX$estimate["sd"])
U_X <- rnorm(10000, mean=U_fitX$estimate["mean"], sd=U_fitX$estimate["sd"])
L_Y <- rnorm(10000, mean=L_fitY$estimate["mean"], sd=L_fitY$estimate["sd"])
U_Y <- rnorm(10000, mean=U_fitY$estimate["mean"], sd=U_fitY$estimate["sd"])
trans_probs <- matrix(data=c(0.98, 0.02, 0.02, 0.98), byrow=TRUE, nrow=2)
states <- c(1, 2)
s0 <- 1;
s <- s0;
## Load data into DataFrame
Xdata <- data.frame(L_X, U_X)
Ydata <- data.frame(L_Y, U_Y)
n = 10000
t_states <- s0;
for (i in 1:(n-1)){
s <- sample(states, size=1, prob=trans_probs[s, ])
t_states <- c(t_states, s)
}
traj_X <- sapply(1:n, function(x) Xdata[x, t_states[x]])
traj_Y <- sapply(1:n, function(x) Ydata[x, t_states[x]])
plot(traj_X[1:1000], pch=16, ylim=c(-0.8,0.8), xlab="Frames", ylab="X Displacement (um)")
plot(traj_Y[1:1000], pch=16, ylim=c(-0.8,0.8), xlab="Frames", ylab="Y Displacement (um)")
hmm <- depmix(response = list(traj_X ~ 1, traj_Y ~ 1), ntimes=10000, nstates=2, family=list(gaussian(), gaussian()), instart=c(1,0))
f <- fit(hmm)
summary(f)
esttrans <- posterior(f)
plot(1:1000, sqrt((traj_X[1:1000])^2 + (traj_Y[1:1000])^2), type='l', main='Sample trajectory', xlab="Frames", ylab="XY Distance (um)")
plot(1:1000, t_states[1:1000], type='l', col="red", main='Actual State', xlab="Frames", ylab="State")
plot(1:1000, esttrans[1:1000,1], type="l", col="blue", main="Predicted State", xlab="Frames", ylab="State")
#set.seed(seed=4)
L_X <- x[x$Cell_Line == "121316.2E1_ESC", "Relative_X.Displacement..um."]
U_X <- x[x$Cell_Line == "013116.2G8_ESC", "Relative_X.Displacement..um."]
L_Y <- x[x$Cell_Line == "121316.2E1_ESC", "Relative_Y.Displacement..um."]
U_Y <- x[x$Cell_Line == "013116.2G8_ESC", "Relative_Y.Displacement..um."]
trans_probs <- matrix(data=c(0.98, 0.02, 0.02, 0.98), byrow=TRUE, nrow=2)
states <- c(1, 2)
s0 <- 1;
s <- s0;
## Load data into DataFrame
Xdata <- data.frame(L_X[1:5000], U_X[1:5000])
Ydata <- data.frame(L_Y[1:5000], U_Y[1:5000])
n = 5000
t_states <- s0;
for (i in 1:(n-1)){
s <- sample(states, size=1, prob=trans_probs[s, ])
t_states <- c(t_states, s)
}
traj_X <- sapply(1:n, function(x) Xdata[x, t_states[x]])
traj_Y <- sapply(1:n, function(x) Ydata[x, t_states[x]])
plot(traj_X[1:1000], pch=16, ylim=c(-0.8,0.8), xlab="Frames", ylab="X Displacement (um)")
plot(traj_Y[1:1000], pch=16, ylim=c(-0.8,0.8), xlab="Frames", ylab="Y Displacement (um)")
hmm <- depmix(response = list(traj_X ~ 1, traj_Y ~ 1), ntimes=5000, nstates=2, family=list(gaussian(), gaussian()), instart=c(1,0))
f <- fit(hmm)
summary(f)
esttrans <- posterior(f)
plot(1:1000, sqrt((traj_X[1:1000])^2 + (traj_Y[1:1000])^2), type='l', main='Sample trajectory', xlab="Frames", ylab="XY Distance (um)")
plot(1:1000, t_states[1:1000], type='l', col="red", main='Actual State', xlab="Frames", ylab="State")
plot(1:1000, esttrans[1:1000,1], type="l", col="blue", main="Predicted State", xlab="Frames", ylab="State")
set.seed(5)
z1 <- rnorm(n=1000, mean=3, sd=1)
X <- array(dim=length(z1))
cor <- 0.8
X[1] <- z1[1]
for (i in 2:length(z1)){
X[i] <- autoFunc(X[i - 1], cor, z1)
}
z2 <- rnorm(n=1000, mean=5, sd=1)
Y <- array(dim=length(z2))
cor <- 0.8
Y[1] <- z2[1]
for (i in 2:length(z2)){
Y[i] <- autoFunc(Y[i - 1], cor, z1)
}
plot(X, pch=16, col="red", ylim=c(0, 15), ylab="Value", xlab="Time", main="Two autocorrelated time course datasets from which to sample")
legend(x="topright", pch=16, legend=c("State1", "State2"), col=c("red", "purple"))
points(Y, pch=16, col="purple")
set.seed(5)
z1 <- rnorm(n=1000, mean=3, sd=2)
X <- array(dim=length(z1))
cor <- 0.8
X[1] <- z1[1]
for (i in 2:length(z1)){
X[i] <- autoFunc(X[i - 1], cor, z1)
}
z2 <- rnorm(n=1000, mean=5, sd=2)
Y <- array(dim=length(z2))
cor <- 0.8
Y[1] <- z2[1]
for (i in 2:length(z2)){
Y[i] <- autoFunc(Y[i - 1], cor, z1)
}
plot(X, pch=16, col="red", ylim=c(0, 15), ylab="Value", xlab="Time", main="Two autocorrelated time course datasets from which to sample")
legend(x="topright", pch=16, legend=c("State1", "State2"), col=c("red", "purple"))
points(Y, pch=16, col="purple")
set.seed(5)
z1 <- rnorm(n=1000, mean=2, sd=2)
X <- array(dim=length(z1))
cor <- 0.8
X[1] <- z1[1]
for (i in 2:length(z1)){
X[i] <- autoFunc(X[i - 1], cor, z1)
}
z2 <- rnorm(n=1000, mean=5, sd=2)
Y <- array(dim=length(z2))
cor <- 0.8
Y[1] <- z2[1]
for (i in 2:length(z2)){
Y[i] <- autoFunc(Y[i - 1], cor, z1)
}
plot(X, pch=16, col="red", ylim=c(0, 15), ylab="Value", xlab="Time", main="Two autocorrelated time course datasets from which to sample")
legend(x="topright", pch=16, legend=c("State1", "State2"), col=c("red", "purple"))
points(Y, pch=16, col="purple")
set.seed(5)
z1 <- rnorm(n=1000, mean=1.5, sd=2)
X <- array(dim=length(z1))
cor <- 0.8
X[1] <- z1[1]
for (i in 2:length(z1)){
X[i] <- autoFunc(X[i - 1], cor, z1)
}
z2 <- rnorm(n=1000, mean=5, sd=2)
Y <- array(dim=length(z2))
cor <- 0.8
Y[1] <- z2[1]
for (i in 2:length(z2)){
Y[i] <- autoFunc(Y[i - 1], cor, z1)
}
plot(X, pch=16, col="red", ylim=c(0, 15), ylab="Value", xlab="Time", main="Two autocorrelated time course datasets from which to sample")
legend(x="topright", pch=16, legend=c("State1", "State2"), col=c("red", "purple"))
points(Y, pch=16, col="purple")
set.seed(5)
z1 <- rnorm(n=1000, mean=1.5, sd=2)
X <- array(dim=length(z1))
cor <- 0.8
X[1] <- z1[1]
for (i in 2:length(z1)){
X[i] <- autoFunc(X[i - 1], cor, z1)
}
z2 <- rnorm(n=1000, mean=5, sd=2)
Y <- array(dim=length(z2))
cor <- 0.8
Y[1] <- z2[1]
for (i in 2:length(z2)){
Y[i] <- autoFunc(Y[i - 1], cor, z2)
}
plot(X, pch=16, col="red", ylim=c(0, 15), ylab="Value", xlab="Time", main="Two autocorrelated time course datasets from which to sample")
legend(x="topright", pch=16, legend=c("State1", "State2"), col=c("red", "purple"))
points(Y, pch=16, col="purple")
set.seed(5)
z1 <- rnorm(n=1000, mean=1.5, sd=2)
X <- array(dim=length(z1))
cor <- 0.8
X[1] <- z1[1]
for (i in 2:length(z1)){
X[i] <- autoFunc(X[i - 1], cor, z1)
}
z2 <- rnorm(n=1000, mean=3, sd=2)
Y <- array(dim=length(z2))
cor <- 0.8
Y[1] <- z2[1]
for (i in 2:length(z2)){
Y[i] <- autoFunc(Y[i - 1], cor, z2)
}
plot(X, pch=16, col="red", ylim=c(0, 15), ylab="Value", xlab="Time", main="Two autocorrelated time course datasets from which to sample")
legend(x="topright", pch=16, legend=c("State1", "State2"), col=c("red", "purple"))
points(Y, pch=16, col="purple")
