import org.micromanager.data.Coords;
import org.micromanager.data.Image;
import org.micromanager.data.Datastore;
import org.micromanager.display.DisplayWindow;
import org.micromanager.acquisition.ChannelSpec;
import mmcorej.TaggedImage;
import org.micromanager.navigation.PositionList;
import org.micromanager.api.PositionList;
import org.micromanager.api.SequenceSettings;
import org.micromanager.api.MultiStagePosition;
import org.micromanager.navigation.MultiStagePosition;
import org.micromanager.acquisition.AcquisitionManager;
import org.micromanager.dialogs.AcqControlDlg;
import java.util.ArrayList;
import java.io.IOException;
import java.util.List;
import java.util.Arrays;
import java.lang.String;
import java.lang.Double;
import java.lang.System;
import java.lang.Object;
import java.util.Date;
import java.awt.Component;
import java.awt.Container;
import java.awt.Window;
import java.awt.Frame;
import javax.swing.JFrame;


acq = mm.acquisitions();
dis = mm.displays();

// Initialize Variables
file_prefix = "020217_092915_2E5_CymR_Halox2_TetR_tdGFP_tdMS2cp-tdtagRFP-T_01";
save_dir = "D:/Data/Jeff/02_02_2017/Batch36_01/";

log_file = save_dir + "MMlog.txt";
f=new FileOutputStream(log_file);
p=new PrintStream(f);
p.println("Automated MicroManager Imaging");
p.println("JMA -- Written 01-25-2017");
java.sql.Timestamp stamp = new java.sql.Timestamp(System.currentTimeMillis());
Date date = new Date(stamp.getTime());
p.println(date);

// Initialize User-defined Variables
int num_frames = 60;				// Number of timepoints
int frame_interval = 20000;			// Spacing between timepoints
double z_start = 0;					// Z stack relative start
double z_end = -9;					// Z stack relative stop
double z_step = 0.3;					// Z stack step
int MS2_freq = 1;
double laser_power_405 = 0.0;
double laser_power_489 = 0.0;
double laser_power_561 = 100.0;
double laser_power_640 = 25.0;

// Initialize Constants
int MS2_count = 1;
int start_pos = 0;
int stop_pos = 0;
int img_count = 0;
boolean end_session = false;
boolean TRUE = true;

p.println("Num Frames: " + num_frames);
p.println("Frame Inteveral: " + frame_interval + "ms");
p.println("Z Start: " + z_start + "um");
p.println("Z End: " + z_end + "um");
p.println("Z Step: " + z_step + "um");

// Initialize Channels for Fast-Channel Acquisition
GFP = new ChannelSpec();
GFP.doZStack = true;
GFP.config = "GFP";
GFP.exposure = 15;
GFP.color = Color.cyan;
GFP.useChannel = true;
GFP.camera = "Camera-1";


Cy5 = new ChannelSpec();
Cy5.doZStack = true;
Cy5.config = "Cy5";
Cy5.exposure = 15;
Cy5.color = Color.magenta;
Cy5.useChannel = true;
Cy5.camera = "Camera-1";


p.println("GFP Exposure: " + GFP.exposure + "ms");
p.println("Cy5 Exposure: " + Cy5.exposure + "ms");


List fast_active_channel = new ArrayList();
//fast_active_channel.add(GFP);
fast_active_channel.add(Cy5);


store = null;
tmp_store = null;
display = null;

Datastore store = mm.data().createRAMDatastore();
Datastore tmp_store = mm.data().createRAMDatastore();
DisplayWindow display = dis.createDisplay(store);
coord_builder = mm.data().getCoordsBuilder();
dummy_coords = mm.data().createCoords("");


// Get Acquisition Settings
//settings = acq.getAcquisitionSettings();

// Get Multi-XY Positions
pl = mm.positions().getPositionList();
num_pos = pl.getNumberOfPositions();
cur_pos = pl.getPosition(0);

// Set Z-Stack Features
List slice_pos = new ArrayList();
for (i=z_start; i > z_end; i = i - z_step){
	slice_pos.add(i);
}
num_slices = slice_pos.size();

// Set Focus Device to Piezo
//mmc.setFocusDevice("Z");  // Set to Piezo
//zPos = mmc.getPosition(mmc.getFocusDevice());

// Get ImageList for Data Storage
//List imgList = new ArrayList();
GFP_Cy5_settings = acq.getAcquisitionSettings();
GFP_Cy5_settings.channelGroup = "Fast-Channel";
GFP_Cy5_settings.channels = fast_active_channel;
GFP_Cy5_settings.keepShutterOpenChannels = true;
GFP_Cy5_settings.keepShutterOpenSlices = true;
GFP_Cy5_settings.numFrames = 1;
GFP_Cy5_settings.relativeZSlice = true;
GFP_Cy5_settings.save = false;
GFP_Cy5_settings.slices = slice_pos;
GFP_Cy5_settings.slicesFirst = false;
GFP_Cy5_settings.useAutofocus = true;
GFP_Cy5_settings.usePositionList = false;
GFP_Cy5_settings.shouldDisplayImages = false;

// Set Camera to 20MHz
mmc.setConfig("Camera Mode", "EM 20MHz");
// Set LaserPower
mmc.setProperty("Camera-1", "MultiplierGain", 300.0);
mmc.setProperty("Laser-Shutter", "405nm mW   ", laser_power_405);
mmc.setProperty("Laser-Shutter", "489nm mW     ", laser_power_489);
mmc.setProperty("Laser-Shutter", "561nm mW      ", laser_power_561);
mmc.setProperty("Laser-Shutter", "640nm mW       ", laser_power_640);

RFP1 = new ChannelSpec();
RFP1.doZStack = true;
RFP1.config = "RFP";
RFP1.exposure = 15;
RFP1.color = Color.yellow;
RFP1.useChannel = true;
RFP1.camera = "Camera-1";

RFP2 = new ChannelSpec();
RFP2.doZStack = true;
RFP2.config = "RFP";
RFP2.exposure = 25;
RFP2.color = Color.yellow;
RFP2.useChannel = true;
RFP2.camera = "Camera-1";

RFP3 = new ChannelSpec();
RFP3.doZStack = true;
RFP3.config = "RFP";
RFP3.exposure = 35;
RFP3.color = Color.yellow;
RFP3.useChannel = true;
RFP3.camera = "Camera-1";

RFP4 = new ChannelSpec();
RFP4.doZStack = true;
RFP4.config = "RFP";
RFP4.exposure = 50;
RFP4.color = Color.yellow;
RFP4.useChannel = true;
RFP4.camera = "Camera-1";

List RFP_channel_1 = new ArrayList();
RFP_channel_1.add(RFP1);
List RFP_channel_2 = new ArrayList();
RFP_channel_2.add(RFP2);
List RFP_channel_3 = new ArrayList();
RFP_channel_3.add(RFP3);
List RFP_channel_4 = new ArrayList();
RFP_channel_4.add(RFP4);

RFP_settings1 = acq.getAcquisitionSettings();
RFP_settings1.channelGroup = "Channel";
RFP_settings1.channels = RFP_channel_1;
RFP_settings1.keepShutterOpenChannels = true;
RFP_settings1.keepShutterOpenSlices = true;
RFP_settings1.numFrames = 1;
RFP_settings1.relativeZSlice = true;
RFP_settings1.save = false;
RFP_settings1.slices = slice_pos;
RFP_settings1.slicesFirst = true;
RFP_settings1.useAutofocus = true;
RFP_settings1.usePositionList = false;
RFP_settings1.shouldDisplayImages = false;

RFP_settings2 = acq.getAcquisitionSettings();
RFP_settings2.channelGroup = "Channel";
RFP_settings2.channels = RFP_channel_2;
RFP_settings2.keepShutterOpenChannels = true;
RFP_settings2.keepShutterOpenSlices = true;
RFP_settings2.numFrames = 1;
RFP_settings2.relativeZSlice = true;
RFP_settings2.save = false;
RFP_settings2.slices = slice_pos;
RFP_settings2.slicesFirst = true;
RFP_settings2.useAutofocus = true;
RFP_settings2.usePositionList = false;
RFP_settings2.shouldDisplayImages = false;


RFP_settings3 = acq.getAcquisitionSettings();
RFP_settings3.channelGroup = "Channel";
RFP_settings3.channels = RFP_channel_3;
RFP_settings3.keepShutterOpenChannels = true;
RFP_settings3.keepShutterOpenSlices = true;
RFP_settings3.numFrames = 1;
RFP_settings3.relativeZSlice = true;
RFP_settings3.save = false;
RFP_settings3.slices = slice_pos;
RFP_settings3.slicesFirst = true;
RFP_settings3.useAutofocus = true;
RFP_settings3.usePositionList = false;
RFP_settings3.shouldDisplayImages = false;

RFP_settings4 = acq.getAcquisitionSettings();
RFP_settings4.channelGroup = "Channel";
RFP_settings4.channels = RFP_channel_4;
RFP_settings4.keepShutterOpenChannels = true;
RFP_settings4.keepShutterOpenSlices = true;
RFP_settings4.numFrames = 1;
RFP_settings4.relativeZSlice = true;
RFP_settings4.save = false;
RFP_settings4.slices = slice_pos;
RFP_settings4.slicesFirst = true;
RFP_settings4.useAutofocus = true;
RFP_settings4.usePositionList = false;
RFP_settings4.shouldDisplayImages = false;

if ( num_pos > 4 ) {
	start_pos = 0;
	stop_pos = 4;
}
else {
	start_pos = 0;
	stop_pos = num_pos;
}
	while (end_session != TRUE){
 	print(start_pos);
	print(stop_pos);

	if (stop_pos == num_pos) {
		end_session = TRUE;
	}

	cur_pos = pl.getPosition(start_pos);
	cur_pos.goToPosition(cur_pos, mmc);


	// Execute Imaging
	for (i=0; i < (num_frames); i++){  // Loop through for each time point desired
		time1 = System.currentTimeMillis();
		print("Time Point: " + i);
		p.println("Time Point: " + i);
		Datastore data1 = mm.data().createRAMDatastore();
		Datastore data2 = mm.data().createRAMDatastore();
   
	
		for (j=start_pos; j < stop_pos; j++){  // Loop through each position
				
				cur_pos = pl.getPosition(j);
				cur_pos.goToPosition(cur_pos, mmc);
				mmc.waitForDevice("XYStage");
				
				print("XY Position: " + cur_pos);
				p.println("XY Position: " + cur_pos);
				print("Capturing CymR and TetR data...");
				p.println("Capturing CymR and TetR data...");
				mmc.setChannelGroup("Fast-Channel");
				mmc.setShutterOpen(true);
				data1 = acq.runAcquisitionWithSettings(GFP_Cy5_settings, true);	

				img_list = data1.getImagesMatching(dummy_coords);
				for (a=0; a < img_list.size(); a++){
					coords = img_list.get(a).getCoords();
					coord_builder = coord_builder.time(i);
					coord_builder = coord_builder.stagePosition(j);
					coord_builder = coord_builder.z(coords.getZ());
					coord_builder = coord_builder.channel(0);
					new_coords = coord_builder.build();
					tmp_img = img_list.get(a).copyAtCoords(new_coords);
					store.putImage(tmp_img);
				}			
			
			if (MS2_count == MS2_freq) {   // Take MS2 images less often
				print("Capturing MS2 data...");
				p.println("Capturing MS2 data...");
				mmc.setChannelGroup("Channel");
				if (j == 0){
				mmc.setShutterOpen(true);
				mmc.setExposure(15.0);
				data2 = acq.runAcquisitionWithSettings(RFP_settings1, true);
				}
				else if (j == 1){
				mmc.setShutterOpen(true);
				mmc.setExposure(25.0);
				data2 = acq.runAcquisitionWithSettings(RFP_settings2, true);
				}
				else if (j == 2){
				mmc.setShutterOpen(true);
				mmc.setExposure(35.0);
				data2 = acq.runAcquisitionWithSettings(RFP_settings3, true);
				}
				else if (j == 3){
				mmc.setShutterOpen(true);
				mmc.setExposure(50.0);
				data2 = acq.runAcquisitionWithSettings(RFP_settings4, true);
				}
				

				img_list = data2.getImagesMatching(dummy_coords);
				for (a=0; a < img_list.size(); a++){
					coords = img_list.get(a).getCoords();
					coord_builder = coord_builder.time(i);
					coord_builder = coord_builder.stagePosition(j);
					coord_builder = coord_builder.z(coords.getZ());
					coord_builder = coord_builder.channel(1);
					new_coords = coord_builder.build();
					tmp_img = img_list.get(a).copyAtCoords(new_coords);
					store.putImage(tmp_img);
				}			
			}
		}
	if (MS2_count == MS2_freq) {
		MS2_count = 1;
		
	} else {
		MS2_count = MS2_count + 1;
	}
 	data1 = null;
 	data2 = null;
	time_elapsed = System.currentTimeMillis() - time1;
	wait_time = frame_interval - time_elapsed;
	if (wait_time < 0){
			print("Imaging not finished before next interval scheduled!");
			p.println("Imaging not finished before next interval scheduled!");
	}
	else{
	print("Time before next imaging round: " + wait_time + "ms");
	p.println("Time before next imaging round: " + wait_time + "ms");
	Thread.sleep(frame_interval - time_elapsed);		// Wait for next time frame.
	}
	}
	// Set up next loop
	for (b = start_pos; b < stop_pos; b++){
		Datastore tmp_store = mm.data().createRAMDatastore();
		coord_string = "p=" + b;
		pos_coords = mm.data().createCoords(coord_string);
		img_list = store.getImagesMatching(pos_coords);
		for (a=0; a < img_list.size(); a++){
					coords = img_list.get(a).getCoords();
					coord_builder = coord_builder.time(coords.getTime());
					coord_builder = coord_builder.stagePosition(0);
					coord_builder = coord_builder.z(coords.getZ());
					coord_builder = coord_builder.channel(coords.getChannel());
					new_coords = coord_builder.build();
					tmp_img = img_list.get(a).copyAtCoords(new_coords);
					tmp_store.putImage(tmp_img);
				}
				tmp_store.setPreferredSaveMode(Datastore.SaveMode.MULTIPAGE_TIFF);
				pos_num = b + 1;
				save_path = save_dir + file_prefix + "XY0" + pos_num;
				tmp_store.setSavePath(save_path);
				tmp_store.save(Datastore.SaveMode.MULTIPAGE_TIFF, save_path);
				tmp_store = null;
}

	
	start_pos = stop_pos;
	stop_pos = stop_pos + 4;
	if (stop_pos > num_pos){
		stop_pos = num_pos;
	}
	print("Imaging Session Completed.");
	p.println("Imaging Session Completed.");
	dis.closeAllDisplayWindows(false);
	f.close();
	}

exit;